// Import c√°c th∆∞ vi·ªán React v√† service c·∫ßn thi·∫øt
import React, { useEffect, useState } from 'react';
import './AdminDashboard.css';
import apiService from "../../service/api";

// Component ch√≠nh qu·∫£n l√Ω ng∆∞·ªùi d√πng d√†nh cho admin
export default function AdminDashboard() {
    // --------------------------- State ---------------------------
    const [account, setAccount] = useState([]);              // Danh s√°ch ng∆∞·ªùi d√πng
    const [loading, setLoading] = useState(true);            // Tr·∫°ng th√°i t·∫£i d·ªØ li·ªáu
    const [status, setStatus] = useState('');                // Tr·∫°ng th√°i th√¥ng b√°o chung
    const [statusImport, setStatusImport] = useState('');    // Th√¥ng b√°o khi import file

    const [isOpenModal, setIsOpenModal] = useState(false);   // Toggle m·ªü modal
    const [modalMode, setModalMode] = useState('');          // Ch·∫ø ƒë·ªô 'add' ho·∫∑c 'edit'
    const [selectedUser, setSelectedUser] = useState(null);  // User ƒëang ƒë∆∞·ª£c ch·ªânh s·ª≠a
    const [validationErrors, setValidationErrors] = useState({}); // C√°c l·ªói form

    const [searchTerm, setSearchTerm] = useState('');        // T·ª´ kh√≥a t√¨m ki·∫øm
    const [filterRole, setFilterRole] = useState('T·∫•t c·∫£');  // L·ªçc theo vai tr√≤
    const [file, setFile] = useState(null);                  // File Excel upload

    // D·ªØ li·ªáu c·ªßa form th√™m/s·ª≠a ng∆∞·ªùi d√πng
    const [formData, setFormData] = useState({
        name: '',
        email: '',
        status: '',
        role: ''
    });

    // --------------------------- H√†m x·ª≠ l√Ω File ---------------------------

    // C·∫≠p nh·∫≠t file ƒë∆∞·ª£c ch·ªçn
    const handleFileChange = (e) => {
        setFile(e.target.files[0]);
        setStatus('');
    };

    // G·ª≠i file excel l√™n server ƒë·ªÉ import user
    const handleImportFile = async () => {
        if (!file) {
            setStatusImport('Vui l√≤ng ch·ªçn m·ªôt file excel tr∆∞·ªõc khi import');
            return;
        }

        const formData = new FormData();
        formData.append('file', file);

        try {
            setStatusImport('ƒêang t·∫£i d·ªØ li·ªáu file....');
            const response = await apiService.admin.importFileUser(formData);
            setStatusImport(response.data || 'Import th√†nh c√¥ng !');

            // Refresh danh s√°ch sau khi import th√†nh c√¥ng
            const updateuser = await apiService.admin.getAllUser();
            setAccount(updateuser);
        } catch (error) {
            console.error('L·ªói khi import', error);
            setStatusImport('Import th·∫•t b·∫°i: ' + (error.response?.data || error.message));
        }
    };

    // --------------------------- Fetch d·ªØ li·ªáu ng∆∞·ªùi d√πng ---------------------------

    useEffect(() => {
        const fetchAccounts = async () => {
            setStatus('ƒêang t·∫£i d·ªØ li·ªáu ......');
            try {
                const response = await apiService.admin.getAllUser();
                setAccount(response);
                setStatus(response.length === 0 ? 'Kh√¥ng c√≥ user n√†o ƒë∆∞·ª£c t·∫°o' : '');
            } catch (error) {
                console.log(error, "L·ªói d·ªØ li·ªáu t·∫£i l√™n acc");
                setStatus('L·ªói khi t·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng');
            } finally {
                setLoading(false);
            }
        };
        fetchAccounts();
    }, []);

    // --------------------------- C√°c h√†m x·ª≠ l√Ω giao di·ªán ---------------------------

    // G√°n class theo role ƒë·ªÉ hi·ªÉn th·ªã m√†u kh√°c nhau
    const getRoleClass = (role) => {
        switch (role) {
            case 'Admin': return 'ADMIN';
            case 'Qu·∫£n l√Ω': return 'MANAGE';
            case 'Nh√¢n vi√™n': return 'STAFF';
            case 'Kh√°ch h√†ng': return 'CUSTOMER';
            default: return 'role user';
        }
    };

    // L·ªçc danh s√°ch ng∆∞·ªùi d√πng theo t·ª´ kh√≥a v√† vai tr√≤
    const getFilteredAccounts = () => {
        return account.filter(user => {
            const name = user.name || '';
            const email = user.email || '';
            const matchesSearch =
                name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                email.toLowerCase().includes(searchTerm.toLowerCase());
            const matchesRole = filterRole === 'T·∫•t c·∫£' || user.role === filterRole;
            return matchesSearch && matchesRole;
        });
    };

    // --------------------------- CRUD Ng∆∞·ªùi d√πng ---------------------------

    // X√≥a ng∆∞·ªùi d√πng theo ID
    const handleDelete = async (id) => {
        if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y?')) {
            try {
                await apiService.admin.deleteUser(id);
                setAccount(account.filter(u => u.user_id !== id));
                alert('ƒê√£ x√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng');
            } catch (error) {
                console.error('L·ªói khi x√≥a ng∆∞·ªùi d√πng:', error);
                setStatus('L·ªói khi x√≥a ng∆∞·ªùi d√πng');
            }
        }
    };

    // M·ªü modal ƒë·ªÉ ch·ªânh s·ª≠a user
    const handleOpenModalEdit = (user) => {
        setSelectedUser(user);
        setModalMode('edit');
        setFormData({
            name: user.name,
            email: user.email,
            status: user.status,
            role: user.role
        });
        setValidationErrors({});
        setIsOpenModal(true);
    };

    // M·ªü modal th√™m m·ªõi user
    const handleOpenModalAdd = () => {
        setSelectedUser(null);
        setModalMode('add');
        setFormData({
            name: '',
            email: '',
            status: 'Active',
            role: ''
        });
        setValidationErrors({});
        setIsOpenModal(true);
    };

    // ƒê√≥ng modal
    const handleCloseModal = () => {
        setIsOpenModal(false);
        setFormData({
            name: '',
            email: '',
            status: '',
            role: ''
        });
        setValidationErrors({});
    };

    // C·∫≠p nh·∫≠t gi√° tr·ªã form khi ng∆∞·ªùi d√πng nh·∫≠p
    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData({ ...formData, [name]: value });
    };

    // Ki·ªÉm tra h·ª£p l·ªá form (g·ªìm email, t√™n, vai tr√≤)
    const validateForm = async () => {
        const errors = {};

        if (!formData.email.trim()) {
            errors.email = 'Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';
        } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
            errors.email = 'Email kh√¥ng h·ª£p l·ªá';
        } else {
            try {
                const exists = await apiService.admin.check_mail(formData.email);
                if (exists) {
                    errors.email = 'Email ƒë√£ t·ªìn t·∫°i';
                }
            } catch (error) {
                console.error('L·ªói khi ki·ªÉm tra email:', error);
            }
        }

        if (!formData.name.trim()) {
            errors.name = 'T√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';
        } else if (formData.name.length < 3) {
            errors.name = 'T√™n ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±';
        }

        if (!formData.role || formData.role === 'None') {
            errors.role = 'Vui l√≤ng ch·ªçn vai tr√≤';
        }

        return errors;
    };

    // Submit form: G·ª≠i l√™n API ƒë·ªÉ t·∫°o ho·∫∑c c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng
    const handleSubmit = async (e) => {
        e.preventDefault();
        const errors = await validateForm();
        if (Object.keys(errors).length > 0) {
            setValidationErrors(errors);
            return;
        }

        setValidationErrors({});
        setLoading(true);

        try {
            if (modalMode === 'add') {
                const newUser = await apiService.admin.createUser(formData);
                setAccount([...account, { ...formData, user_id: newUser.user_id }]);
                alert('Th√™m ng∆∞·ªùi d√πng th√†nh c√¥ng');
            } else {
                await apiService.admin.updateUser(selectedUser.user_id, {
                    user_id: selectedUser.user_id,
                    ...formData
                });
                setAccount(account.map(u =>
                    u.user_id === selectedUser.user_id ? { ...u, ...formData } : u
                ));
                alert('C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng');
            }
            handleCloseModal();
        } catch (error) {
            console.error('L·ªói khi l∆∞u ng∆∞·ªùi d√πng:', error);
            if (error.response && error.response.status === 403) {
                alert('B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y');
                handleCloseModal();
            } else {
                setStatus('L·ªói khi l∆∞u ng∆∞·ªùi d√πng');
            }
        } finally {
            setLoading(false);
        }
    };

    // --------------------------- Giao di·ªán ---------------------------

    return (
        <div className="container">
            {/* Sidebar b√™n tr√°i */}
            <aside className="sidebar">
                <h2>Admin</h2>
                <a className="back" href="/">Quay v·ªÅ</a>
                <ul>
                    <li>üè† Trang ch·ªß</li>
                    <li className="active">üë§ Qu·∫£n l√Ω ng∆∞·ªùi d√πng</li>
                    <li>üîê Ph√¢n quy·ªÅn</li>
                    <li>üõ†Ô∏è Qu·∫£n l√Ω d·ªãch v·ª•</li>
                    <li>üìä Th·ªëng k√™ t·ªïng quan</li>
                    <li>‚öôÔ∏è Qu·∫£n tr·ªã h·ªá th·ªëng</li>
                </ul>
            </aside>

            {/* N·ªôi dung ch√≠nh */}
            <main className="main-content">
                <div className="topbar">
                    <div className="title">Qu·∫£n l√Ω ng∆∞·ªùi d√πng</div>
                    <button className="add-btn" onClick={handleOpenModalAdd}>+ Th√™m ng∆∞·ªùi d√πng</button>
                </div>

                {/* B·ªô l·ªçc t√¨m ki·∫øm, l·ªçc vai tr√≤ v√† import file */}
                <div className="filters">
                    <input
                        type="text"
                        placeholder="T√¨m ki·∫øm ng∆∞·ªùi d√πng..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                    />
                    <select value={filterRole} onChange={(e) => setFilterRole(e.target.value)}>
                        <option value="T·∫•t c·∫£">T·∫•t c·∫£ vai tr√≤</option>
                        <option value="CUSTOMER">Kh√°ch h√†ng</option>
                        <option value="STAFF">Nh√¢n vi√™n</option>
                        <option value="MANAGER">Qu·∫£n l√Ω</option>
                        <option value="ADMIN">Qu·∫£n tr·ªã vi√™n</option>
                    </select>
                    <input type="file" accept=".xlsx, .xls" onChange={handleFileChange} />
                    <button onClick={handleImportFile} style={{ marginTop: '1rem' }}>Import</button>
                    {statusImport && (
                        <p style={{ marginTop: '1rem', color: statusImport.includes('th·∫•t b·∫°i') ? 'red' : 'green' }}>
                            {statusImport}
                        </p>
                    )}
                </div>

                {/* Hi·ªÉn th·ªã th√¥ng b√°o tr·∫°ng th√°i */}
                {status && <div className="status-message">{status}</div>}

                {/* B·∫£ng danh s√°ch ng∆∞·ªùi d√πng */}
                {!loading && !status && (
                    <table className="user-table">
                        <thead>
                            <tr>
                                <th>Ng∆∞·ªùi d√πng</th>
                                <th>Vai tr√≤</th>
                                <th>Tr·∫°ng th√°i</th>
                                <th>H√†nh ƒë·ªông</th>
                            </tr>
                        </thead>
                        <tbody>
                            {getFilteredAccounts().map((u, index) => (
                                <tr key={index}>
                                    <td>
                                        <div className="avatar">{u.name ? u.name[0] : '?'}</div>
                                        <div>
                                            <div>{u.name}</div>
                                            <div className="email">{u.email}</div>
                                        </div>
                                    </td>
                                    <td><span className={getRoleClass(u.role)}>{u.role}</span></td>
                                    <td><span className="status active">{u.status}</span></td>
                                    <td>
                                        <button className="action edit" onClick={() => handleOpenModalEdit(u)}>‚úèÔ∏è</button>
                                        <button className="action delete" onClick={() => handleDelete(u.user_id)}>üóëÔ∏è</button>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                )}
            </main>

            {/* Modal th√™m / s·ª≠a ng∆∞·ªùi d√πng */}
            {isOpenModal && (
                <div className="modal">
                    <div className="modal-content">
                        <h2>{modalMode === 'add' ? 'Th√™m ng∆∞·ªùi d√πng' : 'Ch·ªânh s·ª≠a ng∆∞·ªùi d√πng'}</h2>
                        <form onSubmit={handleSubmit}>
                            <label>
                                H·ªç v√† t√™n:
                                <input type="text" name="name" value={formData.name} onChange={handleChange} />
                                {validationErrors.name && <div className="error">{validationErrors.name}</div>}
                            </label>
                            <label>
                                Email:
                                <input type="email" name="email" value={formData.email} onChange={handleChange} />
                                {validationErrors.email && <div className="error">{validationErrors.email}</div>}
                            </label>
                            <label>
                                Tr·∫°ng th√°i:
                                <select name="status" value={formData.status} onChange={handleChange}>
                                    <option>Active</option>
                                    <option>Inactive</option>
                                </select>
                            </label>
                            <label>
                                Vai tr√≤:
                                <select name="role" value={formData.role} onChange={handleChange}>
                                    <option>None</option>
                                    <option value="STAFF">Nh√¢n vi√™n</option>
                                    <option value="MANAGER">Qu·∫£n l√Ω</option>
                                    <option value="CUSTOMER">Kh√°ch h√†ng</option>
                                    <option value="ADMIN">Admin</option>
                                </select>
                                {validationErrors.role && <div className="error">{validationErrors.role}</div>}
                            </label>
                            <button type="submit" disabled={loading}>
                                {loading ? 'ƒêang x·ª≠ l√Ω...' : 'L∆∞u'}
                            </button>
                            <button type="button" onClick={handleCloseModal}>Tho√°t</button>
                        </form>
                    </div>
                </div>
            )}
        </div>
    );
}
