import React, { useState, useEffect } from "react";
import { Table, Tag, Button, Input, Select, Modal, Steps, Spin, Alert } from "antd";
import apiService from '../../service/api';


export default function CaseTracking() {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [search, setSearch] = useState("");
  const [statusFilter, setStatusFilter] = useState("");
  const [selected, setSelected] = useState(null);
  const [activeTab, setActiveTab] = useState(0);
  const [caseDetails, setCaseDetails] = useState(null);
  const [participants, setParticipants] = useState([]);
  const [loadingParticipants, setLoadingParticipants] = useState(false);
  const [participantsError, setParticipantsError] = useState(null);
  const [resultData, setResultData] = useState(null);
  const [loadingResult, setLoadingResult] = useState(false);
  const [resultError, setResultError] = useState(null);
  const statusOptions = [
    { value: "PENDING", label: "Ch·ªù x·ª≠ l√Ω", color: "orange" },
    { value: "IN_PROGRESS", label: "ƒêang x·ª≠ l√Ω", color: "blue" },
    { value: "COMPLETED", label: "Ho√†n th√†nh", color: "green" },
    { value: "CANCELLED", label: "ƒê√£ h·ªßy", color: "red" },
  ];
  const fetchData = async () => {
    try {
      setLoading(true);
      const response = await apiService.manager.getAllTracking();
      console.log("üëâ D·ªØ li·ªáu t·ª´ API: ", response);
      setData(response || []); // S·ª≠ d·ª•ng tr·ª±c ti·∫øp response thay v√¨ response.data
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu:", error);
      setError("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu: " + error.message);
    } finally {
      setLoading(false);
    }
  };
  // G·ªçi API participants khi tab ƒë∆∞·ª£c m·ªü
  useEffect(() => {
    if (activeTab === 1 && selected?.appointmentId) {
      setLoadingParticipants(true);
      setParticipantsError(null);
      
      apiService.staff.getParticipantsByAppointmentId(selected.appointmentId)
        .then(response => {
          // G·ªçi API sample cho m·ªói participant
          const participantsWithSamples = response || [];
          const samplePromises = participantsWithSamples.map(participant => 
            apiService.staff.getSampleByParticipantId(participant.participantId)
              .then(sampleResponse => {
                return {
                  ...participant,
                  sampleDTO: sampleResponse
                };
              })
              .catch(error => {
                console.error(`‚ùå Error fetching sample for participant ${participant.participantId}:`, error);
                return {
                  ...participant,
                  sampleDTO: null
                };
              })
          );
          
          Promise.all(samplePromises)
            .then(participantsWithSamples => {
              setParticipants(participantsWithSamples);
            })
            .catch(error => {
              console.error("‚ùå Error processing samples:", error);
              setParticipants(response || []);
            });
        })
        .catch(error => {
          console.error("‚ùå Error fetching participants:", error);
          setParticipantsError(error.message || "L·ªói khi t·∫£i d·ªØ li·ªáu ng∆∞·ªùi tham gia");
        })
        .finally(() => {
          setLoadingParticipants(false);
        });
    }
  }, [activeTab, selected?.appointmentId]);

  // G·ªçi API result khi tab ƒë∆∞·ª£c m·ªü
  useEffect(() => {
    if (activeTab === 3 && selected?.appointmentId) {
      setLoadingResult(true);
      setResultError(null);
      
      apiService.staff.getResultByAppointmentId(selected.appointmentId)
        .then(response => {
          console.log("‚úÖ Result data:", response);
          setResultData(response);
        })
        .catch(error => {
          console.error("‚ùå Error fetching result:", error);
          setResultError(error.message || "L·ªói khi t·∫£i d·ªØ li·ªáu k·∫øt qu·∫£");
        })
        .finally(() => {
          setLoadingResult(false);
        });
    }
  }, [activeTab, selected?.appointmentId]);

  useEffect(() => {
    fetchData();
  }, []);
  const filtered = data.filter(item => {
    const matchesSearch = item.caseId?.toLowerCase().includes(search.toLowerCase()) ||
                         item.customer?.toLowerCase().includes(search.toLowerCase());
    const matchesStatus = !statusFilter || item.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  
  const columns = [
    { title: "M√£ h·ªì s∆°", dataIndex: "caseId", key: "caseId" },
    { title: "Kh√°ch h√†ng", dataIndex: "customer", key: "customer" },
    { title: "Lo·∫°i h·ªì s∆°", dataIndex: "type", key: "type" },
    { title: "Ng√†y t·∫°o", dataIndex: "createdAt", key: "createdAt" },
    {
      title: "Tr·∫°ng th√°i",
      dataIndex: "status",
      key: "status",
      render: status => {
        const st = statusOptions.find(s => s.value === status);
        return <Tag color={st?.color}>{st?.label || status}</Tag>;
      }
    },
    { title: "Nh√¢n vi√™n ph·ª• tr√°ch", dataIndex: "staff", key: "staff" },
    {
      title: "Thao t√°c",
      key: "action",
      render: (_, record) => (
        <Button type="link" onClick={() => { 
          setSelected(record); 
        }}>Xem chi ti·∫øt</Button>
      ),
    },
  ];

  return (
    <div style={{ background: "#fff", padding: 24, borderRadius: 8, maxWidth: 2000, margin: "32px auto" }}>
      <h2>Theo d√µi tr·∫°ng th√°i h·ªì s∆°</h2>

      {loading ? (
        <Spin tip="ƒêang t·∫£i d·ªØ li·ªáu..." />
      ) : error ? (
        <Alert type="error" message={error} />
      ) : (
        <>
          <div style={{ display: "flex", gap: 12, marginBottom: 16 }}>
            <Input.Search
              placeholder="T√¨m theo m√£ h·ªì s∆° ho·∫∑c kh√°ch h√†ng"
              value={search}
              onChange={e => setSearch(e.target.value)}
              style={{ width: 260 }}
            />
            <Select
              value={statusFilter}
              onChange={setStatusFilter}
              placeholder="L·ªçc theo tr·∫°ng th√°i"
              allowClear
              style={{ width: 180 }}
              options={statusOptions.map(s => ({ value: s.value, label: s.label }))}
            />
          </div>
          <Table
            columns={columns}
            dataSource={filtered}
            rowKey="caseId"
            pagination={{ pageSize: 6 }}
          />
        </>
      )}

      {/* Tabs hi·ªÉn th·ªã chi ti·∫øt khi ch·ªçn h·ªì s∆° */}
      {selected && (
        <Modal
          open={!!selected}
          title={`Chi ti·∫øt h·ªì s∆° ${selected?.caseId}`}
          onCancel={() => { setSelected(null); setActiveTab(0); }}
          footer={null}
          width={800}
        >
          <div className="tabs" style={{ display: 'flex', gap: 12, marginBottom: 18 }}>
            <div className={`tab${activeTab === 0 ? ' active' : ''}`} style={{ padding: '10px 16px', background: activeTab === 0 ? '#017baf' : '#e0e7ef', color: activeTab === 0 ? '#fff' : '#015d84', borderRadius: 8, cursor: 'pointer', fontWeight: 500 }} onClick={() => setActiveTab(0)}>Chi ti·∫øt l·ªãch h·∫πn</div>
            <div className={`tab${activeTab === 1 ? ' active' : ''}`} style={{ padding: '10px 16px', background: activeTab === 1 ? '#017baf' : '#e0e7ef', color: activeTab === 1 ? '#fff' : '#015d84', borderRadius: 8, cursor: 'pointer', fontWeight: 500 }} onClick={() => setActiveTab(1)}>Ng∆∞·ªùi tham gia & M·∫´u</div>
            <div className={`tab${activeTab === 2 ? ' active' : ''}`} style={{ padding: '10px 16px', background: activeTab === 2 ? '#017baf' : '#e0e7ef', color: activeTab === 2 ? '#fff' : '#015d84', borderRadius: 8, cursor: 'pointer', fontWeight: 500 }} onClick={() => setActiveTab(2)}>Thanh to√°n</div>
            <div className={`tab${activeTab === 3 ? ' active' : ''}`} style={{ padding: '10px 16px', background: activeTab === 3 ? '#017baf' : '#e0e7ef', color: activeTab === 3 ? '#fff' : '#015d84', borderRadius: 8, cursor: 'pointer', fontWeight: 500 }} onClick={() => setActiveTab(3)}>Chi ti·∫øt k·∫øt qu·∫£</div>
          </div>
          <div className={`tab-content${activeTab === 0 ? ' active' : ''}`} style={{ display: activeTab === 0 ? 'block' : 'none' }}>
            <div><b>M√£ l·ªãch h·∫πn:</b> {selected.appointmentId || caseDetails?.appointmentId || 'Ch∆∞a c√≥ th√¥ng tin'}</div>
            <div><b>Kh√°ch h√†ng:</b> {selected.customer}</div>
            <div><b>D·ªãch v·ª•:</b> {selected.serviceName || caseDetails?.serviceName || 'Ch∆∞a c√≥ th√¥ng tin'}</div>
            <div><b>Ng√†y h·∫πn:</b> {selected.appointmentDate ? new Date(selected.appointmentDate).toLocaleDateString() : selected.createdAt ? new Date(selected.createdAt).toLocaleDateString() : 'Ch∆∞a c√≥ th√¥ng tin'}</div>
            <div><b>Gi·ªù h·∫πn:</b> {selected.appointmentTime ? selected.appointmentTime : 'Ch∆∞a c√≥ th√¥ng tin'}</div>
            <div><b>Lo·∫°i l·ªãch h·∫πn:</b> {selected.type}</div>
            <div><b>Nh√¢n vi√™n ph·ª• tr√°ch:</b> {selected.staff}</div>
            <div><b>Tr·∫°ng th√°i hi·ªán t·∫°i:</b>{' '}
              <Tag color={statusOptions.find(s => s.value === selected.status)?.color}>
                {statusOptions.find(s => s.value === selected.status)?.label || selected.status}
              </Tag>
            </div>
            <div><b>M√£ h·ªì s∆°:</b> {caseDetails?.caseCode || selected.caseId}</div>
            <div><b>Ng√†y t·∫°o:</b> {selected.createdAt ? new Date(selected.createdAt).toLocaleDateString() : 'Ch∆∞a c√≥ th√¥ng tin'}</div>
            <div style={{ margin: "18px 0 8px 0" }}><b>Ti·∫øn tr√¨nh x·ª≠ l√Ω:</b></div>
            <Steps
              direction="vertical"
              size="small"
              current={Array.isArray(selected.timeline) ? selected.timeline.length - 1 : 0}
              items={Array.isArray(selected.timeline) ? selected.timeline.map(t => ({
                title: t.title,
                description: t.date
              })) : []}
            />
            {(!selected.timeline || !Array.isArray(selected.timeline)) && (
              <div style={{ color: 'red', marginTop: 8 }}>Kh√¥ng c√≥ d·ªØ li·ªáu ti·∫øn tr√¨nh x·ª≠ l√Ω!</div>
            )}
          </div>
          <div className={`tab-content${activeTab === 1 ? ' active' : ''}`} style={{ display: activeTab === 1 ? 'block' : 'none' }}>
            {loadingParticipants ? (
              <Spin tip="ƒêang t·∫£i d·ªØ li·ªáu ng∆∞·ªùi tham gia..." />
            ) : participantsError ? (
              <Alert type="error" message={participantsError} />
            ) : !selected?.appointmentId ? (
              <Alert type="warning" message="Kh√¥ng c√≥ m√£ l·ªãch h·∫πn ƒë·ªÉ t·∫£i d·ªØ li·ªáu ng∆∞·ªùi tham gia" />
            ) : participants.length === 0 ? (
              <Alert type="info" message="Kh√¥ng c√≥ d·ªØ li·ªáu ng∆∞·ªùi tham gia cho l·ªãch h·∫πn n√†y" />
            ) : (
              <div>
                <div style={{ marginBottom: 16 }}>
                  <strong>M√£ l·ªãch h·∫πn:</strong> {selected.appointmentId}
                </div>
                <table className="detail-table" style={{ width: '100%', borderCollapse: 'collapse', marginBottom: '16px' }}>
                  <thead>
                    <tr>
                      <th style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left' }}>H·ªç t√™n</th>
                      <th style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left' }}>S·ªë cƒÉn c∆∞·ªõc c√¥ng d√¢n</th>
                      <th style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left' }}>Quan h·ªá</th>
                      <th style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left' }}>Lo·∫°i m·∫´u</th>
                      <th style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left' }}>Tr·∫°ng th√°i m·∫´u</th>
                      <th style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left' }}>K·∫øt qu·∫£</th>
                    </tr>
                  </thead>
                  <tbody>
                    {participants.map((p, index) => (
                      <tr key={index}>
                        <td style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left' }}>{p.name}</td>
                        <td style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left' }}>{p.citizenId}</td>
                        <td style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left' }}>{p.relationship}</td>
                        <td style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left' }}>{p.sampleDTO?.sampleType || 'Ch∆∞a c√≥'}</td>
                        <td style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left' }}>{p.sampleDTO?.status || 'Ch∆∞a thu th·∫≠p'}</td>
                        <td style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left' }}>{p.sampleDTO?.result || 'ch∆∞a c√≥ k·∫øt qu·∫£'}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )}
          </div>
          <div className={`tab-content${activeTab === 2 ? ' active' : ''}`} style={{ display: activeTab === 2 ? 'block' : 'none' }}>
            {selected?.paymentDTO ? (
              <div>
                <div style={{ marginBottom: 16 }}>
                  <strong>M√£ l·ªãch h·∫πn:</strong> {selected.appointmentId}
                </div>
                <table className="detail-table" style={{ width: '100%', borderCollapse: 'collapse', marginBottom: '16px' }}>
                  <thead>
                    <tr>
                      <th style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left' }}>M√£ thanh to√°n</th>
                      <th style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left' }}>S·ªë ti·ªÅn</th>
                      <th style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left' }}>Ph∆∞∆°ng th·ª©c</th>
                      <th style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left' }}>Tr·∫°ng th√°i</th>
                      <th style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left' }}>Ng√†y thanh to√°n</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left' }}>{selected.paymentDTO.paymentID}</td>
                      <td style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left' }}>
                        {selected.paymentDTO.paymentAmount.toLocaleString('vi-VN')} ‚Ç´
                      </td>
                      <td style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left' }}>{selected.paymentDTO.paymentMethod}</td>
                      <td style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left' }}>{selected.paymentDTO.paymentStatus}</td>
                      <td style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left' }}>{selected.paymentDTO.paymentDate}</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            ) : (
              <Alert type="info" message="Ch∆∞a c√≥ d·ªØ li·ªáu thanh to√°n cho l·ªãch h·∫πn n√†y" />
            )}
          </div>
          <div className={`tab-content${activeTab === 3 ? ' active' : ''}`} style={{ display: activeTab === 3 ? 'block' : 'none' }}>
            {loadingResult ? (
              <Spin tip="ƒêang t·∫£i d·ªØ li·ªáu k·∫øt qu·∫£..." />
            ) : resultError ? (
              <Alert type="error" message={resultError} />
            ) : !selected?.appointmentId ? (
              <Alert type="warning" message="Kh√¥ng c√≥ m√£ l·ªãch h·∫πn ƒë·ªÉ t·∫£i d·ªØ li·ªáu k·∫øt qu·∫£" />
            ) : !resultData ? (
              <Alert type="info" message="Ch∆∞a c√≥ d·ªØ li·ªáu k·∫øt qu·∫£ cho l·ªãch h·∫πn n√†y" />
            ) : (
              <div>
                <div style={{ marginBottom: 16 }}>
                  <strong>M√£ l·ªãch h·∫πn:</strong> {selected.appointmentId}
                </div>
                <table className="detail-table" style={{ width: '100%', borderCollapse: 'collapse', marginBottom: '16px' }}>
                  <tbody>
                    <tr>
                      <td style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left', fontWeight: 'bold' }}>K·∫øt qu·∫£</td>
                      <td style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left' }}>{resultData.resultValue || 'Kh√¥ng c√≥ d·ªØ li·ªáu'}</td>
                    </tr>
                    <tr>
                      <td style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left', fontWeight: 'bold' }}>Ghi ch√∫</td>
                      <td style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left' }}>{resultData.notes || '-'}</td>
                    </tr>
                    <tr>
                      <td style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left', fontWeight: 'bold' }}>Ng√†y ph√¢n t√≠ch</td>
                      <td style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left' }}>{resultData.resultDate ? new Date(resultData.resultDate).toLocaleString() : '-'}</td>
                    </tr>
                    <tr>
                      <td style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left', fontWeight: 'bold' }}>Tr·∫°ng th√°i</td>
                      <td style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left' }}>{resultData.status || '-'}</td>
                    </tr>
                    <tr>
                      <td style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left', fontWeight: 'bold' }}>Ng∆∞·ªùi tham gia</td>
                      <td style={{ border: '1px solid #e0e7ef', padding: '10px 12px', textAlign: 'left' }}>{resultData.participants || '-'}</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            )}
          </div>
        </Modal>
      )}
    </div>
  );
}