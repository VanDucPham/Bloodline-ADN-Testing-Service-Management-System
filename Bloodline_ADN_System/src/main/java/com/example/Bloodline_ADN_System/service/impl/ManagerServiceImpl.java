// ‚úÖ Tri·ªÉn khai logic x·ª≠ l√Ω cho c√°c ch·ª©c nƒÉng qu·∫£n l√Ω (Manager)
package com.example.Bloodline_ADN_System.service.impl;

import com.example.Bloodline_ADN_System.Entity.*;
import com.example.Bloodline_ADN_System.dto.*;
import com.example.Bloodline_ADN_System.repository.*;
import com.example.Bloodline_ADN_System.service.ManagerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.time.Month;
import java.util.*;
import java.util.stream.Collectors;

@Service // ƒê√°nh d·∫•u ƒë√¢y l√† service ƒë·ªÉ Spring qu·∫£n l√Ω
public class ManagerServiceImpl implements ManagerService {

    // Inject c√°c repository ph·ª•c v·ª• nghi·ªáp v·ª•
    @Autowired private ManagerRepository managerRepository;
    @Autowired private UserRepository userRepository;
    @Autowired private PaymentRepository paymentRepository;
    @Autowired private AppointmentRepository appointmentRepository;

    // ‚úÖ L·∫•y to√†n b·ªô danh s√°ch nh√¢n vi√™n d∆∞·ªõi d·∫°ng DTO
    public List<StaffDTO> getAllStaff() {
        return managerRepository.findByRole(User.UserRole.STAFF)
                .stream()
                .map(this::mapToStaffDTO) // chuy·ªÉn t·ª´ User entity -> StaffDTO
                .collect(Collectors.toList());
    }

    // üîç T√¨m ki·∫øm nh√¢n vi√™n theo t√™n, email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i
    public List<StaffDTO> searchStaff(String keyword) {
        Set<User> result = new HashSet<>();
        // T√¨m theo t√™n (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
        result.addAll(managerRepository.findByRoleAndNameContainingIgnoreCase(User.UserRole.STAFF, keyword));
        // T√¨m theo email
        result.addAll(managerRepository.findByRoleAndEmailContainingIgnoreCase(User.UserRole.STAFF, keyword));
        // T√¨m theo s·ªë ƒëi·ªán tho·∫°i
        result.addAll(managerRepository.findByRoleAndPhoneContaining(User.UserRole.STAFF, keyword));
        // Tr·∫£ v·ªÅ danh s√°ch ƒë√£ lo·∫°i tr√πng v√† chuy·ªÉn sang DTO
        return result.stream().map(this::mapToStaffDTO).collect(Collectors.toList());
    }

    // ‚õî V√¥ hi·ªáu h√≥a nh√¢n vi√™n (chuy·ªÉn status sang INACTIVE)
    public void deactivateStaff(Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));
        if (user.getRole() != User.UserRole.STAFF)
            throw new RuntimeException("User is not a staff");
        user.setStatus(User.Status.INACTIVE); // c·∫≠p nh·∫≠t tr·∫°ng th√°i
        userRepository.save(user);
    }

    // üí∞ T√≠nh t·ªïng doanh thu trong m·ªôt th√°ng c·ª• th·ªÉ
    public RevenueResponse getRevenueByMonth(int month, int year) {
        LocalDateTime start = LocalDateTime.of(year, month, 1, 0, 0);
        LocalDateTime end = start.plusMonths(1);
        // L·ªçc danh s√°ch thanh to√°n ho√†n t·∫•t trong kho·∫£ng th·ªùi gian ƒë√≥
        List<Payment> payments = paymentRepository.findByStatusAndPaymentDateBetween(
                Payment.PaymentStatus.COMPLETED, start, end
        );
        // T√≠nh t·ªïng ti·ªÅn
        double total = payments.stream().mapToDouble(Payment::getAmount).sum();
        return new RevenueResponse(total, "Th√°ng " + month + "/" + year);
    }

    // üíµ T√≠nh t·ªïng doanh thu trong c·∫£ m·ªôt nƒÉm
    public RevenueResponse getRevenueByYear(int year) {
        LocalDateTime start = LocalDateTime.of(year, Month.JANUARY, 1, 0, 0);
        LocalDateTime end = start.plusYears(1);
        List<Payment> payments = paymentRepository.findByStatusAndPaymentDateBetween(
                Payment.PaymentStatus.COMPLETED, start, end
        );
        double total = payments.stream().mapToDouble(Payment::getAmount).sum();
        return new RevenueResponse(total, "NƒÉm " + year);
    }

    // üì• Tr·∫£ v·ªÅ danh s√°ch c√°c giao d·ªãch ƒë√£ thanh to√°n
    public List<PaymentDTO> getAllCompletedPayments() {
        return paymentRepository.findByStatus(Payment.PaymentStatus.COMPLETED)
                .stream()
                .map(this::mapToPaymentDTO) // chuy·ªÉn t·ª´ entity -> DTO
                .collect(Collectors.toList());
    }

    // üìä Th·ªëng k√™ top d·ªãch v·ª• ƒë∆∞·ª£c s·ª≠ d·ª•ng nhi·ªÅu nh·∫•t
    public List<ServiceUsageDTO> getTopUsedServices() {
        // L·∫•y danh s√°ch c√°c l·ªãch h·∫πn ƒë√£ ho√†n t·∫•t
        List<Appointment> appointments = appointmentRepository.findByStatus(Appointment.AppointmentStatus.COMPLETED);

        // Nh√≥m theo t√™n d·ªãch v·ª• v√† ƒë·∫øm s·ªë l·∫ßn s·ª≠ d·ª•ng
        Map<String, Long> serviceCount = appointments.stream()
                .filter(a -> a.getService() != null) // lo·∫°i b·ªè l·ªãch h·∫πn kh√¥ng c√≥ d·ªãch v·ª•
                .collect(Collectors.groupingBy(
                        a -> a.getService().getServiceName(),
                        Collectors.counting()
                ));

        // S·∫Øp x·∫øp gi·∫£m d·∫ßn theo s·ªë l∆∞·ª£t s·ª≠ d·ª•ng v√† tr·∫£ v·ªÅ DTO
        return serviceCount.entrySet().stream()
                .sorted(Map.Entry.<String, Long>comparingByValue().reversed())
                .map(entry -> new ServiceUsageDTO(entry.getKey(), entry.getValue()))
                .collect(Collectors.toList());
    }

    // üîÅ H√†m h·ªó tr·ª£ chuy·ªÉn ƒë·ªïi t·ª´ User -> StaffDTO
    private StaffDTO mapToStaffDTO(User user) {
        return new StaffDTO(
                user.getUserId(),
                user.getName(),
                user.getEmail(),
                user.getPhone(),
                user.getGender(),
                user.getAddress(),
                user.getStatusString()
        );
    }

    // üîÅ H√†m h·ªó tr·ª£ chuy·ªÉn ƒë·ªïi t·ª´ Payment -> PaymentDTO
    private PaymentDTO mapToPaymentDTO(Payment payment) {
        return new PaymentDTO(
                payment.getPaymentId(),
                payment.getAppointment().getUser().getName(),
                payment.getAmount(),
                payment.getPaymentMethod().toString(),
                payment.getPaymentDate(),
                payment.getNotes()
        );
    }
}
